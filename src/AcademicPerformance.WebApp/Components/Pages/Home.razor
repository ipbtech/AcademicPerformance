@page "/"
@rendermode InteractiveServer
@attribute [StreamRendering]

@inject NavigationManager NavManager

<PageTitle>Home</PageTitle>

<h1 style="margin-bottom:24px">Academic Performance Application</h1>
<MudGrid>
    <MudItem sm="12" md="4">
        <MudPaper Class="pa-16" Style="height:300px;">
            <MudText Typo="Typo.h6">You are welcome! &#x1F643;</MudText>
            <MudText Typo="Typo.subtitle1">Here you can see your student's educational performance, 
                manage their grades and create new students or educational subjects</MudText>
        </MudPaper>
    </MudItem>
    <MudItem sm="12" md="8" Style="width:100%;">
        <MudPaper Class="responsive-column" Style="height:300px;display:flex;align-items:center" >
            <MudChart ChartType="ChartType.Pie" InputData="@gradesChart.GradeValues"
                InputLabels="@gradesChart.GradeNames" Style="margin-left:20px" LegendPosition="@Position.Right" Width="180px" Height="180px">
            </MudChart>
            <div class="responsive-text-block" style="margin-left:32px;">
                <MudText Typo="Typo.h5">Average grade: @gradesChart.AvarageGrade</MudText>
                <MudText Typo="Typo.h5">Total subjects: @gradesChart.SubjectsTotal</MudText>
                <MudText Typo="Typo.h5">Total students: @gradesChart.StudentsTotal</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem sm="12" md="12" lg="12" Style="margin-bottom:24px">
        <MudPaper>
            <MudChart ChartType="ChartType.StackedBar" ChartOptions="@chartOptions" ChartSeries="@barChartSeries" XAxisLabels="@xAxisLabels" 
                Width="100%" Height="400px"></MudChart>
        </MudPaper>
    </MudItem>
</MudGrid>

<style>
    @@media (max-width: 768px) {
        .responsive-column {
        display: flex;
        flex-direction: column;
        align-items: center;
        }
    }
    @@media (max-width: 768px) {
        .responsive-text-block {
        margin-left: 0px;
        margin-top: 8px;
        }
    }
</style>

@code {

    [Inject]
    private IReportService reportService { get; set; }

    private TotalGradesDto gradesChart;
    private GradesBySubjectsDto gradesBySubjectsBarChart;

    private List<ChartSeries> barChartSeries = new();
    private string[] xAxisLabels = { };
    private ChartOptions chartOptions = new ChartOptions
    {
        XAxisLines = true,
        YAxisTicks = 3,
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            gradesChart = await reportService.GetTotalGradesAsync();
            gradesBySubjectsBarChart = await reportService.GetGradesBySubjectsAsync();
            PrepareGradesBySubjectsChart();
        }
        catch
        {
            NavManager.NavigateTo("/error");
        }
    }

    private void PrepareGradesBySubjectsChart()
    {
        xAxisLabels = gradesBySubjectsBarChart.SubjectNames;
        foreach (var series in gradesBySubjectsBarChart.GradeValues)
        {
            barChartSeries.Add(new ChartSeries
            {
                Name = series.Name,
                Data = series.Values
            });
        }
    }
}